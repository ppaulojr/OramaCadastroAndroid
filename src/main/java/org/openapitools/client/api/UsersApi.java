/**
 * Criação de Contas
 * API de Criação de Contas.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cadastro_api@orama.com.br
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import OramaCadastroAndroid.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import OramaCadastroAndroid.Aprovacao;
import OramaCadastroAndroid.AutenticacaoObjeto;
import OramaCadastroAndroid.Confirmado;
import java.io.File;
import OramaCadastroAndroid.LoginCriado;
import OramaCadastroAndroid.LoginSenhaObjeto;
import OramaCadastroAndroid.PerfilUsuario;
import OramaCadastroAndroid.UsuarioSenhaObjeto;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class UsersApi {
  String basePath = "https://virtserver.swaggerhub.com/api/contas/v1.0";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Autentica um usuário que ainda não é cliente.
  * Autentica um usuário que ainda não é cliente, caso o usuário não existe, ou a combinação de usuário e senha ou ainda o usuário já seja cliente retorna um erro.
   * @param usuarioSenhaObjeto Dados para autenticação do usuário
   * @return AutenticacaoObjeto
  */
  public AutenticacaoObjeto accountAutenticacaoPost (UsuarioSenhaObjeto usuarioSenhaObjeto) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = usuarioSenhaObjeto;
    // verify the required parameter 'usuarioSenhaObjeto' is set
    if (usuarioSenhaObjeto == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usuarioSenhaObjeto' when calling accountAutenticacaoPost",
        new ApiException(400, "Missing the required parameter 'usuarioSenhaObjeto' when calling accountAutenticacaoPost"));
    }

    // create path and map variables
    String path = "/autenticacao/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AutenticacaoObjeto) ApiInvoker.deserialize(localVarResponse, "", AutenticacaoObjeto.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Autentica um usuário que ainda não é cliente.
   * Autentica um usuário que ainda não é cliente, caso o usuário não existe, ou a combinação de usuário e senha ou ainda o usuário já seja cliente retorna um erro.
   * @param usuarioSenhaObjeto Dados para autenticação do usuário
  */
  public void accountAutenticacaoPost (UsuarioSenhaObjeto usuarioSenhaObjeto, final Response.Listener<AutenticacaoObjeto> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = usuarioSenhaObjeto;

    // verify the required parameter 'usuarioSenhaObjeto' is set
    if (usuarioSenhaObjeto == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usuarioSenhaObjeto' when calling accountAutenticacaoPost",
        new ApiException(400, "Missing the required parameter 'usuarioSenhaObjeto' when calling accountAutenticacaoPost"));
    }

    // create path and map variables
    String path = "/autenticacao/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AutenticacaoObjeto) ApiInvoker.deserialize(localVarResponse,  "", AutenticacaoObjeto.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Consulta o status de confirmação do documento que foi submetido
  * Consulta o status de confirmação do documento que foi submetido
   * @param cpf CPF do perfil
   * @param tipoDocumento Tipo do documento
   * @return void
  */
  public void accountDocumentoConfirmacaoGet (String cpf, String tipoDocumento) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountDocumentoConfirmacaoGet",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountDocumentoConfirmacaoGet"));
    }
    // verify the required parameter 'tipoDocumento' is set
    if (tipoDocumento == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tipoDocumento' when calling accountDocumentoConfirmacaoGet",
        new ApiException(400, "Missing the required parameter 'tipoDocumento' when calling accountDocumentoConfirmacaoGet"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/documento/confirmacao/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tipoDocumento", tipoDocumento));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Consulta o status de confirmação do documento que foi submetido
   * Consulta o status de confirmação do documento que foi submetido
   * @param cpf CPF do perfil   * @param tipoDocumento Tipo do documento
  */
  public void accountDocumentoConfirmacaoGet (String cpf, String tipoDocumento, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountDocumentoConfirmacaoGet",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountDocumentoConfirmacaoGet"));
    }
    // verify the required parameter 'tipoDocumento' is set
    if (tipoDocumento == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tipoDocumento' when calling accountDocumentoConfirmacaoGet",
        new ApiException(400, "Missing the required parameter 'tipoDocumento' when calling accountDocumentoConfirmacaoGet"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/documento/confirmacao/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "tipoDocumento", tipoDocumento));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Anexa ou atualiza documento para conferencia de autenticidade do perfil.
  * Anexa ou atualiza documento que será usado no processo conferencia de autenticidade do perfil.
   * @param cpf CPF do perfil
   * @param tipoDocumento Tipo do documento
   * @param name Nome do atributo codificado em form-data &#39;image&#39;
   * @param filename Arquivo binário que será enviado. O formato deve ser PDF, PNG ou JPG
   * @return void
  */
  public void accountDocumentoPut (String cpf, String tipoDocumento, String name, File filename) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountDocumentoPut",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountDocumentoPut"));
    }
    // verify the required parameter 'tipoDocumento' is set
    if (tipoDocumento == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tipoDocumento' when calling accountDocumentoPut",
        new ApiException(400, "Missing the required parameter 'tipoDocumento' when calling accountDocumentoPut"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling accountDocumentoPut",
        new ApiException(400, "Missing the required parameter 'name' when calling accountDocumentoPut"));
    }
    // verify the required parameter 'filename' is set
    if (filename == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'filename' when calling accountDocumentoPut",
        new ApiException(400, "Missing the required parameter 'filename' when calling accountDocumentoPut"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/documento/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tipoDocumento", tipoDocumento));
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (name != null) {
        localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (filename != null) {
        localVarBuilder.addBinaryBody("filename", filename);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("name", ApiInvoker.parameterToString(name));
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Anexa ou atualiza documento para conferencia de autenticidade do perfil.
   * Anexa ou atualiza documento que será usado no processo conferencia de autenticidade do perfil.
   * @param cpf CPF do perfil   * @param tipoDocumento Tipo do documento   * @param name Nome do atributo codificado em form-data &#39;image&#39;   * @param filename Arquivo binário que será enviado. O formato deve ser PDF, PNG ou JPG
  */
  public void accountDocumentoPut (String cpf, String tipoDocumento, String name, File filename, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountDocumentoPut",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountDocumentoPut"));
    }
    // verify the required parameter 'tipoDocumento' is set
    if (tipoDocumento == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tipoDocumento' when calling accountDocumentoPut",
        new ApiException(400, "Missing the required parameter 'tipoDocumento' when calling accountDocumentoPut"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling accountDocumentoPut",
        new ApiException(400, "Missing the required parameter 'name' when calling accountDocumentoPut"));
    }
    // verify the required parameter 'filename' is set
    if (filename == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'filename' when calling accountDocumentoPut",
        new ApiException(400, "Missing the required parameter 'filename' when calling accountDocumentoPut"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/documento/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "tipoDocumento", tipoDocumento));


    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (name != null) {
        localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (filename != null) {
        localVarBuilder.addBinaryBody("filename", filename);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("name", ApiInvoker.parameterToString(name));

    }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Cria um login para usuário.
  * Cria um novo login que será usado para acesso ao sistema.
   * @param loginSenhaObjeto Dados para criação do login
   * @return LoginCriado
  */
  public LoginCriado accountIdentificacaoPost (LoginSenhaObjeto loginSenhaObjeto) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = loginSenhaObjeto;
    // verify the required parameter 'loginSenhaObjeto' is set
    if (loginSenhaObjeto == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'loginSenhaObjeto' when calling accountIdentificacaoPost",
        new ApiException(400, "Missing the required parameter 'loginSenhaObjeto' when calling accountIdentificacaoPost"));
    }

    // create path and map variables
    String path = "/identificacao/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LoginCriado) ApiInvoker.deserialize(localVarResponse, "", LoginCriado.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cria um login para usuário.
   * Cria um novo login que será usado para acesso ao sistema.
   * @param loginSenhaObjeto Dados para criação do login
  */
  public void accountIdentificacaoPost (LoginSenhaObjeto loginSenhaObjeto, final Response.Listener<LoginCriado> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = loginSenhaObjeto;

    // verify the required parameter 'loginSenhaObjeto' is set
    if (loginSenhaObjeto == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'loginSenhaObjeto' when calling accountIdentificacaoPost",
        new ApiException(400, "Missing the required parameter 'loginSenhaObjeto' when calling accountIdentificacaoPost"));
    }

    // create path and map variables
    String path = "/identificacao/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LoginCriado) ApiInvoker.deserialize(localVarResponse,  "", LoginCriado.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retorna o estado de aprovação de um perfil
  * 
   * @param cpf CPF do perfil
   * @return Aprovacao
  */
  public Aprovacao accountPerfilAprovacaoGet (String cpf) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilAprovacaoGet",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilAprovacaoGet"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/aprovacao/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Aprovacao) ApiInvoker.deserialize(localVarResponse, "", Aprovacao.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retorna o estado de aprovação de um perfil
   * 
   * @param cpf CPF do perfil
  */
  public void accountPerfilAprovacaoGet (String cpf, final Response.Listener<Aprovacao> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilAprovacaoGet",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilAprovacaoGet"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/aprovacao/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Aprovacao) ApiInvoker.deserialize(localVarResponse,  "", Aprovacao.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Estado atual de confirmação do celular
  * 
   * @param cpf CPF do perfil
   * @return Confirmado
  */
  public Confirmado accountPerfilCelularAutenticacaoConfirmacaoGet (String cpf) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilCelularAutenticacaoConfirmacaoGet",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilCelularAutenticacaoConfirmacaoGet"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/celular/autenticacao/confirmacao/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Confirmado) ApiInvoker.deserialize(localVarResponse, "", Confirmado.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Estado atual de confirmação do celular
   * 
   * @param cpf CPF do perfil
  */
  public void accountPerfilCelularAutenticacaoConfirmacaoGet (String cpf, final Response.Listener<Confirmado> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilCelularAutenticacaoConfirmacaoGet",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilCelularAutenticacaoConfirmacaoGet"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/celular/autenticacao/confirmacao/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Confirmado) ApiInvoker.deserialize(localVarResponse,  "", Confirmado.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gera um código para iniciar o processo de validação do número do celular
  * 
   * @param cpf CPF do perfil
   * @return void
  */
  public void accountPerfilCelularAutenticacaoPost (String cpf) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilCelularAutenticacaoPost",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilCelularAutenticacaoPost"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/celular/autenticacao/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gera um código para iniciar o processo de validação do número do celular
   * 
   * @param cpf CPF do perfil
  */
  public void accountPerfilCelularAutenticacaoPost (String cpf, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilCelularAutenticacaoPost",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilCelularAutenticacaoPost"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/celular/autenticacao/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Confirma o numero de celular, concluindo a validação
  * 
   * @param cpf CPF do perfil
   * @param codigo Código de validação para confirmar o número de celular
   * @return Confirmado
  */
  public Confirmado accountPerfilCelularConfirmacaoPost (String cpf, String codigo) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilCelularConfirmacaoPost",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilCelularConfirmacaoPost"));
    }
    // verify the required parameter 'codigo' is set
    if (codigo == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codigo' when calling accountPerfilCelularConfirmacaoPost",
        new ApiException(400, "Missing the required parameter 'codigo' when calling accountPerfilCelularConfirmacaoPost"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/celular/autenticacao/confirmacao/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "codigo", codigo));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Confirmado) ApiInvoker.deserialize(localVarResponse, "", Confirmado.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Confirma o numero de celular, concluindo a validação
   * 
   * @param cpf CPF do perfil   * @param codigo Código de validação para confirmar o número de celular
  */
  public void accountPerfilCelularConfirmacaoPost (String cpf, String codigo, final Response.Listener<Confirmado> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilCelularConfirmacaoPost",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilCelularConfirmacaoPost"));
    }
    // verify the required parameter 'codigo' is set
    if (codigo == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codigo' when calling accountPerfilCelularConfirmacaoPost",
        new ApiException(400, "Missing the required parameter 'codigo' when calling accountPerfilCelularConfirmacaoPost"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/celular/autenticacao/confirmacao/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "codigo", codigo));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Confirmado) ApiInvoker.deserialize(localVarResponse,  "", Confirmado.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Estado atual de confirmação do email
  * 
   * @param cpf CPF do perfil
   * @return Confirmado
  */
  public Confirmado accountPerfilEmailAutenticacaoConfirmacaoGet (String cpf) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilEmailAutenticacaoConfirmacaoGet",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilEmailAutenticacaoConfirmacaoGet"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/email/autenticacao/confirmacao/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Confirmado) ApiInvoker.deserialize(localVarResponse, "", Confirmado.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Estado atual de confirmação do email
   * 
   * @param cpf CPF do perfil
  */
  public void accountPerfilEmailAutenticacaoConfirmacaoGet (String cpf, final Response.Listener<Confirmado> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilEmailAutenticacaoConfirmacaoGet",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilEmailAutenticacaoConfirmacaoGet"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/email/autenticacao/confirmacao/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Confirmado) ApiInvoker.deserialize(localVarResponse,  "", Confirmado.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gera um código para iniciar o processo de validação do email
  * 
   * @param cpf CPF do perfil
   * @return void
  */
  public void accountPerfilEmailAutenticacaoPost (String cpf) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilEmailAutenticacaoPost",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilEmailAutenticacaoPost"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/email/autenticacao/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gera um código para iniciar o processo de validação do email
   * 
   * @param cpf CPF do perfil
  */
  public void accountPerfilEmailAutenticacaoPost (String cpf, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilEmailAutenticacaoPost",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilEmailAutenticacaoPost"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/email/autenticacao/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Confirma o email, concluindo a validação
  * 
   * @param cpf CPF do perfil
   * @param codigo Código de validação para confirmar o email
   * @return Confirmado
  */
  public Confirmado accountPerfilEmailConfirmacaoPost (String cpf, String codigo) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilEmailConfirmacaoPost",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilEmailConfirmacaoPost"));
    }
    // verify the required parameter 'codigo' is set
    if (codigo == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codigo' when calling accountPerfilEmailConfirmacaoPost",
        new ApiException(400, "Missing the required parameter 'codigo' when calling accountPerfilEmailConfirmacaoPost"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/email/autenticacao/confirmacao/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "codigo", codigo));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Confirmado) ApiInvoker.deserialize(localVarResponse, "", Confirmado.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Confirma o email, concluindo a validação
   * 
   * @param cpf CPF do perfil   * @param codigo Código de validação para confirmar o email
  */
  public void accountPerfilEmailConfirmacaoPost (String cpf, String codigo, final Response.Listener<Confirmado> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilEmailConfirmacaoPost",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilEmailConfirmacaoPost"));
    }
    // verify the required parameter 'codigo' is set
    if (codigo == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codigo' when calling accountPerfilEmailConfirmacaoPost",
        new ApiException(400, "Missing the required parameter 'codigo' when calling accountPerfilEmailConfirmacaoPost"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/email/autenticacao/confirmacao/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "codigo", codigo));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Confirmado) ApiInvoker.deserialize(localVarResponse,  "", Confirmado.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retorna o perfil de um usuário que ainda não foi transformado em cliente.
  * 
   * @param cpf CPF do perfil
   * @param campos Lista de campos para ser inclusivamente filtrados
   * @return PerfilUsuario
  */
  public PerfilUsuario accountPerfilGet (String cpf, String campos) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilGet",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilGet"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "campos", campos));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PerfilUsuario) ApiInvoker.deserialize(localVarResponse, "", PerfilUsuario.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retorna o perfil de um usuário que ainda não foi transformado em cliente.
   * 
   * @param cpf CPF do perfil   * @param campos Lista de campos para ser inclusivamente filtrados
  */
  public void accountPerfilGet (String cpf, String campos, final Response.Listener<PerfilUsuario> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilGet",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilGet"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "campos", campos));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PerfilUsuario) ApiInvoker.deserialize(localVarResponse,  "", PerfilUsuario.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Submete o perfil de usuário associado a um login para ser criado como cliente.
  * Submete o perfil de usuário associado a um login para ser criado como cliente. Após submissão deste POST, o perfil não poderá mais ser alterado. Para alterar ou inserir informações no perfil antes de submeter o perfil o método PUT deve ser utilizado.
   * @param cpf CPF do perfil
   * @return void
  */
  public void accountPerfilPost (String cpf) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilPost",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilPost"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Submete o perfil de usuário associado a um login para ser criado como cliente.
   * Submete o perfil de usuário associado a um login para ser criado como cliente. Após submissão deste POST, o perfil não poderá mais ser alterado. Para alterar ou inserir informações no perfil antes de submeter o perfil o método PUT deve ser utilizado.
   * @param cpf CPF do perfil
  */
  public void accountPerfilPost (String cpf, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilPost",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilPost"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Atualiza perfil para criação de conta.
  * Atualiza um perfil de usuário associado a um login para o processo de criação de um usuário. Cada chamada modifica o perfil. Quando o perfil estiver pronto para ser submetido para criação de conta, basta enviar um POST.
   * @param cpf CPF do perfil
   * @param perfilUsuario Dados para criação ou atualização do perfil
   * @return void
  */
  public void accountPerfilPut (String cpf, PerfilUsuario perfilUsuario) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = perfilUsuario;
    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilPut",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilPut"));
    }
    // verify the required parameter 'perfilUsuario' is set
    if (perfilUsuario == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'perfilUsuario' when calling accountPerfilPut",
        new ApiException(400, "Missing the required parameter 'perfilUsuario' when calling accountPerfilPut"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/".replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Atualiza perfil para criação de conta.
   * Atualiza um perfil de usuário associado a um login para o processo de criação de um usuário. Cada chamada modifica o perfil. Quando o perfil estiver pronto para ser submetido para criação de conta, basta enviar um POST.
   * @param cpf CPF do perfil   * @param perfilUsuario Dados para criação ou atualização do perfil
  */
  public void accountPerfilPut (String cpf, PerfilUsuario perfilUsuario, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = perfilUsuario;

    // verify the required parameter 'cpf' is set
    if (cpf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cpf' when calling accountPerfilPut",
        new ApiException(400, "Missing the required parameter 'cpf' when calling accountPerfilPut"));
    }
    // verify the required parameter 'perfilUsuario' is set
    if (perfilUsuario == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'perfilUsuario' when calling accountPerfilPut",
        new ApiException(400, "Missing the required parameter 'perfilUsuario' when calling accountPerfilPut"));
    }

    // create path and map variables
    String path = "/perfil/{cpf}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cpf" + "\\}", apiInvoker.escapeString(cpf.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
